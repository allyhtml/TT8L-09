import tkinter as tk
from tkinter import font, messagebox, PhotoImage, Label, Frame, Entry, Button, Toplevel
import random
import os
import datetime
import sys
import subprocess

# Function to handle signing in
def signin():
    email = user.get()
    password = code.get()

    try:
        with open("user_data.txt", "r") as file:
            for line in file:
                parts = line.strip().split(',')
                if len(parts) == 2:
                    saved_email, saved_password = parts
                    if email == saved_email and password == saved_password:
                        messagebox.showinfo("Success", "Login successful!")
                        main_frame.pack_forget()
                        show_frame0()
                        return
        messagebox.showerror("Error", "Invalid email or password")
    except FileNotFoundError:
        messagebox.showerror("Error", "No registered users found. Please register first.")

# Function to handle email entry focus events
def on_enter_email(e):
    if user.get() == 'Email':
        user.delete(0, 'end')

def on_leave_email(e):
    if user.get() == '':
        user.insert(0, 'Email')

# Function to handle password entry focus events
def on_enter_password(e):
    if code.get() == 'Password':
        code.delete(0, 'end')
        code.config(show='*')

def on_leave_password(e):
    if code.get() == '':
        code.config(show='')
        code.insert(0, 'Password')

# Function to handle registration
def save_registration():
    email_val = user_entry.get()
    password_val = password_entry.get()

    if not email_val.endswith('@gmail.com'):
        messagebox.showerror("Error", "Invalid email. Please use a valid Gmail address.")
        return

    if len(password_val) < 6:
        messagebox.showerror("Error", "Password must be at least 6 characters long.")
        return

    try:
        with open("user_data.txt", "a") as file:
            file.write(f"{email_val},{password_val}\n")
        messagebox.showinfo("Success", "Registration successful!")
    except Exception as e:
        print("Error:", e)
        messagebox.showerror("Error", "Failed to register. Please try again later.")

# Function to handle registration window
def register():
    global user_entry, password_entry
    reg_window = Toplevel(root)
    reg_window.title("Registration")
    reg_window.geometry('400x250+500+300')
    reg_window.config(bg="white")

    reg_label = Label(reg_window, text="Register your account", fg='#57a1f8', bg='white', font=('Microsoft YaHei UI Light', 16, 'bold'))
    reg_label.pack()

    email_label = Label(reg_window, text="Email:", bg="white", font=('Microsoft YaHei UI Light', 11))
    email_label.pack()
    user_entry = Entry(reg_window, width=25, fg='black', bg="white", font=('Microsoft YaHei UI Light', 11))
    user_entry.pack()

    password_label = Label(reg_window, text="Password:", bg="white", font=('Microsoft YaHei UI Light', 11))
    password_label.pack()
    password_entry = Entry(reg_window, width=25, fg='black', bg="white", font=('Microsoft YaHei UI Light', 11), show='*')
    password_entry.pack()

    register_button = Button(reg_window, text="Register", bg='#57a1f8', fg='white', command=save_registration)
    register_button.pack()

# Function to clear the current canvas
def clear_canvas():
    for widget in window.winfo_children():
        widget.destroy()

# Function to handle quiz game display
class QuizGame:
    def __init__(self, root, questions):
        self.root = root
        custom_font = font.Font(family="Helvetica", size=14)
        self.questions = questions
        random.shuffle(self.questions)
        self.score = 0
        self.current_question_index = 0
        self.question_label = tk.Label(self.root, text="", font=custom_font, wraplength=600, bg="#F8C6EF")
        self.question_label.pack(pady=20)
        self.option_buttons = []
        for i in range(4):
            button = tk.Button(self.root, text="", font=custom_font, width=50, height=3, command=lambda i=i: self.check_answer(i), bg="#F1D1CC")
            button.pack(pady=10)
            self.option_buttons.append(button)
        self.score_label = tk.Label(self.root, text="Score:0", font=custom_font, bg="#D1EAF0")
        self.score_label.pack(pady=20)
        self.display_question()

    def display_question(self):
        if self.current_question_index < len(self.questions):
            question_data = self.questions[self.current_question_index]
            self.question_label.config(text=question_data["question"])
            options = question_data["options"]
            random.shuffle(options)
            for i, option in enumerate(options):
                self.option_buttons[i].config(text=option)
        else:
            self.end_game()

    def check_answer(self, selected_option):
        selected_answer = self.option_buttons[selected_option].cget("text")
        correct_answer = self.questions[self.current_question_index]["answer"]
        if selected_answer == correct_answer:
            self.score += 1
            messagebox.showinfo("Correct", "Your answer is correct!")
        else:
            messagebox.showerror("Incorrect", f"Your answer is incorrect! The correct answer is: {correct_answer}")
        self.score_label.config(text="Score: {}".format(self.score))
        self.current_question_index += 1
        self.display_question()

    def end_game(self):
        score_message = "Final Score: {}/{}".format(self.score, len(self.questions))
        self.question_label.config(text=score_message)
        for button in self.option_buttons:
            button.config(state=tk.DISABLED)
        play_again_button = tk.Button(self.root, text="Play Again", font=("Arial", 12), command=self.play_again)
        play_again_button.pack(pady=10)
        back_button = tk.Button(self.root, text="Back to Quiz Selection", font=("Arial", 12), command=go_back_to_selection)
        back_button.pack(pady=10)

    def play_again(self):
        self.score = 0
        self.current_question_index = 0
        self.score_label.config(text="Score: 0")
        random.shuffle(self.questions)
        for button in self.option_buttons:
            button.config(state=tk.NORMAL)
        self.display_question()

# Function to show quiz selection screen
def quiz_selection_screen():
    global quiz_frame
    main_frame.pack_forget()
    quiz_frame = tk.Frame(root, bg="#d1eaf0")
    quiz_frame.pack(fill="both", expand=True)

    quebiz_section = tk.Label(quiz_frame, text="QUEBIZ SECTION", font=comic_sans_font, bg="#d1eaf0")
    quebiz_section.place(x=500, y=51)

    physic1 = tk.Frame(quiz_frame, bg="#ffc8c0", width=378, height=532)
    physic1.place(x=94, y=203)
    physic2 = tk.Frame(quiz_frame, bg="#ffc8c0", width=378, height=532)
    physic2.place(x=558, y=203)
    physic3 = tk.Frame(quiz_frame, bg="#ffc8c0", width=378, height=532)
    physic3.place(x=1022, y=203)

    digital_system_label = tk.Label(quiz_frame, text="DIGITAL SYSTEM", font=stylish_font, bg="#ffc8c0", fg="#000")
    digital_system_label.place(x=144, y=222)
    mathematics_label = tk.Label(quiz_frame, text="MATHEMATICS", font=stylish_font, bg="#ffc8c0", fg="#000")
    mathematics_label.place(x=624, y=222)
    physic_label = tk.Label(quiz_frame, text="PHYSIC", font=stylish_font, bg="#ffc8c0", fg="#000")
    physic_label.place(x=1150, y=222)

    current_dir = os.path.dirname(os.path.abspath(__file__))
    saly_16_img = tk.PhotoImage(file=os.path.join(current_dir, "Design/Saly-16.png"))
    saly_16_img = saly_16_img.subsample(1)
    saly_10_img = tk.PhotoImage(file=os.path.join(current_dir, "Design/Saly-10.png"))
    saly_19_img = tk.PhotoImage(file=os.path.join(current_dir, "Design/Saly-19.png"))

    saly_16_label = tk.Label(quiz_frame, image=saly_16_img, bg="#FFC8C0")
    saly_16_label.place(x=1064, y=260)
    saly_16_label.image = saly_16_img
    saly_10_label = tk.Label(quiz_frame, image=saly_10_img, bg="#FFC8C0")
    saly_10_label.place(x=578, y=272)
    saly_19_label = tk.Label(quiz_frame, image=saly_19_img, bg="#FFC8C0")
    saly_19_label.place(x=122, y=260)

# Frame 5 (Settings)
def show_frame5():
    clear_canvas()
    canvas = Canvas(
        window,
        bg="#D1EAF0",
        height=801,
        width=1474,
        bd=0,
        highlightthickness=0,
        relief="ridge"
    )
    canvas.place(x=0, y=0)

    images['image_set'] = load_image("./build/assets/frame5/image_set.png")
    canvas.create_image(737.0, 146.0, image=images['image_set'])

    images['image_logo'] = load_image("./build/assets/frame5/image_logo.png")
    canvas.create_image(47.0, 42.0, image=images['image_logo'])

    images['image_button1'] = load_image("./build/assets/frame5/image_button1.png")
    button_1 = Button(
        image=images['image_button1'],
        borderwidth=0,
        highlightthickness=0,
        command=lambda: open_pdf("assets\settings\setting_1.pdf"),
        relief="flat"
    )
    button_1.place(x=75, y=238, width=725, height=93)

    images['image_button2'] = load_image("./build/assets/frame5/image_button2.png")
    button_2 = Button(
        image=images['image_button2'],
        borderwidth=0,
        highlightthickness=0,
        command=lambda: open_pdf("assets\settings\setting_2.pdf"),
        relief="flat"
    )
    button_2.place(x=674, y=238, width=727, height=93)

    images['image_3'] = load_image("./build/assets/frame5/image_3.png")
    canvas.create_image(200.0, 640.0, image=images['image_3'])

    images['image_4'] = load_image("./build/assets/frame5/image_4.png")
    canvas.create_image(1226.0, 635.0, image=images['image_4'])

    images['button_back'] = load_image("./build/assets/frame5/button_back.png")
    button_back = Button(
        image=images['button_back'],
        borderwidth=0,
        highlightthickness=0,
        command=show_frame0,
        relief="flat"
    )
    button_back.place(x=651, y=707, width=153, height=61)

# Frame 6 (About)
def show_frame6():
    clear_canvas()
    canvas = Canvas(
        window,
        bg="#D1EAF0",
        height=801,
        width=1474,
        bd=0,
        highlightthickness=0,
        relief="ridge"
    )
    canvas.place(x=0, y=0)

    images['image_about'] = load_image("./build/assets/frame6/image_about.png")
    canvas.create_image(737.0, 146.0, image=images['image_about'])

    images['image_logo'] = load_image("./build/assets/frame6/image_logo.png")
    canvas.create_image(47.0, 42.0, image=images['image_logo'])

    images['image_button1'] = load_image("./build/assets/frame6/image_button1.png")
    button_1 = Button(
        image=images['image_button1'],
        borderwidth=0,
        highlightthickness=0,
        command=lambda: open_pdf("assets\about\about_1.pdf"),
        relief="flat"
    )
    button_1.place(x=75, y=238, width=725, height=93)

    images['image_button2'] = load_image("./build/assets/frame6/image_button2.png")
    button_2 = Button(
        image=images['image_button2'],
        borderwidth=0,
        highlightthickness=0,
        command=lambda: open_pdf("assets\about\about_2.pdf"),
        relief="flat"
    )
    button_2.place(x=674, y=238, width=727, height=93)

    images['image_3'] = load_image("./build/assets/frame6/image_3.png")
    canvas.create_image(200.0, 640.0, image=images['image_3'])

    images['image_4'] = load_image("./build/assets/frame6/image_4.png")
    canvas.create_image(1226.0, 635.0, image=images['image_4'])

    images['button_back'] = load_image("./build/assets/frame6/button_back.png")
    button_back = Button(
        image=images['button_back'],
        borderwidth=0,
        highlightthickness=0,
        command=show_frame0,
        relief="flat"
    )
    button_back.place(x=651, y=707, width=153, height=61)

# Frame 7 (Feedback)
def show_frame7():
    clear_canvas()
    canvas = Canvas(
        window,
        bg="#D1EAF0",
        height=801,
        width=1474,
        bd=0,
        highlightthickness=0,
        relief="ridge"
    )
    canvas.place(x=0, y=0)

    images['image_feedback'] = load_image("./build/assets/frame7/image_feedback.png")
    canvas.create_image(737.0, 146.0, image=images['image_feedback'])

    images['image_logo'] = load_image("./build/assets/frame7/image_logo.png")
    canvas.create_image(47.0, 42.0, image=images['image_logo'])

    images['image_button1'] = load_image("./build/assets/frame7/image_button1.png")
    button_1 = Button(
        image=images['image_button1'],
        borderwidth=0,
        highlightthickness=0,
        command=lambda: open_pdf("assets\feedback\feedback_1.pdf"),
        relief="flat"
    )
    button_1.place(x=75, y=238, width=725, height=93)

    images['image_button2'] = load_image("./build/assets/frame7/image_button2.png")
    button_2 = Button(
        image=images['image_button2'],
        borderwidth=0,
        highlightthickness=0,
        command=lambda: open_pdf("assets\feedback\feedback_2.pdf"),
        relief="flat"
    )
    button_2.place(x=674, y=238, width=727, height=93)

    images['image_3'] = load_image("./build/assets/frame7/image_3.png")
    canvas.create_image(200.0, 640.0, image=images['image_3'])

    images['image_4'] = load_image("./build/assets/frame7/image_4.png")
    canvas.create_image(1226.0, 635.0, image=images['image_4'])

    images['button_back'] = load_image("./build/assets/frame7/button_back.png")
    button_back = Button(
        image=images['button_back'],
        borderwidth=0,
        highlightthickness=0,
        command=show_frame0,
        relief="flat"
    )
    button_back.place(x=651, y=707, width=153, height=61)

# Displaying the initial frame
show_frame0()

# Running the main Tkinter window
window.mainloop()



